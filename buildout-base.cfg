[buildout]
parts =
    instance
    test
    isort
    code-analysis
    i18ndude
    robot
    releaser
develop = .

[buildout:os.path.exists('/.dockerenv') and not os.environ.get('TRAVIS')]
eggs-directory = /cache/eggs-directory
download-cache = /cache/download-cache
extends-cache = /cache/extends-cache

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
http-address = 8080
eggs =
    Plone
    Pillow
    sauna.reload
    Products.PrintingMailHost
    collective.pfg.dexterity [test]
zope-conf-additional =
    %import sauna.reload

[test]
recipe = zc.recipe.testrunner
eggs =
    ${instance:eggs}
    plone.app.robotframework [debug]
defaults = ['-s', 'collective.pfg.dexterity', '--auto-color', '--auto-progress']

[test:os.path.exists('/.dockerenv') and not os.environ.get('TRAVIS')]
initialization =
    import os, socket
    localhost = socket.gethostbyname(socket.gethostname())
    os.environ['ROBOT_REMOTE_URL'] = 'http://selenium:4444/wd/hub'
    os.environ['ROBOT_ZOPE_HOST'] = os.environ['ZSERVER_HOST'] = localhost

[isort]
recipe = zc.recipe.egg
eggs = isort

[code-analysis]
recipe = plone.recipe.codeanalysis [recommended]
directory = ${buildout:directory}/src/collective
flake8-max-complexity = 15
flake8-ignore = P001,T000
flake8-extensions =
    flake8-blind-except
    flake8-debugger
    flake8-coding

[i18ndude]
recipe = zc.recipe.egg
eggs =
    i18ndude
    zest.pocompile

[robot]
recipe = zc.recipe.egg
eggs =
    ${test:eggs}
    plone.app.robotframework[debug,reload]
scripts =
    robot-server
    robot

[releaser]
recipe = zc.recipe.egg
eggs =
    zest.releaser [recommended]
    zest.pocompile

[versions]
setuptools =
zc.buildout =
zc.recipe.egg =

flake8 = 2.6.2
flake8-coding = 1.1.1

# Don't use a released version of collective.pfg.dexterity
collective.pfg.dexterity =
